#include	<MacHeaders.h>#include	<Events.h>#include	<Folders.h>#include	<Gestalt.h>#include	<LowMem.h>#include	<OSUtils.h>#include	<Palettes.h>#include	<Processes.h>#include	<QDOffscreen.h>#include	<Sound.h>#include	<stddef.h>#include	<stdlib.h>#include	<Timer.h>#include	<Types.h>#include	"RDriver.h"#include	"InputSprocket.h"#include	"defines.h"#include	"structure defs.h"/****************************************************//*													*//*				prototypes							*//*													*//****************************************************/void WorldCheckOne(void);void WorldCheckTwo(void);void WorldCheckThree(void);void WorldCheckFour(short);void WorldCheckFive(short);void WorldCheckSix(void);void WorldCheckSeven(void);// main.cvoid				main( void );void				SetupRgn (void);void				CleanUpAndQuit(void);void				DoEvent( EventRecord *eventPtr );void				HandleSuspendResume( EventRecord *eventPtr );void				HandleUpdate( EventRecord *eventPtr );void				HandleMouseDown( EventRecord *eventPtr );void				HandleMouseMoved(Point mousePoint);pascal OSErr 		HandleOpenDocAE(const AppleEvent *theAEvent, AppleEvent *reply, long handlerRefCon);void				FlashFadeIn(void);// startup.c#if	GENERATINGCFMpascal Boolean		SBIsControlStripVisible ( void );pascal void			SBShowHideControlStrip(Boolean showIt);#endifvoid				InitialiseToolBox( void );void				StartupStuff( void );void				HackCheck(void);void				HackCheckTwo(void);void				HackCheckThree(void);void				HackCheckFour(void);static Boolean		IsControlStripAvailable (void);// user interface.cvoid				DrawControlScreen( Boolean );void				PreloadBlackBox( void );void				DrawBlackBox( void );void				PrepareForDialog( void );void				CleanupAfterDialog( void );void				CustomShowCursor(void);void				CustomHideCursor(void);// menusvoid				HandleMenuChoice(long menuChoice);void				HandleAppleChoice(short item);void				StartupHideMenuBar( void );void				ShutdownHideMenuBar( void );void				HideTheMenuBar( void );void				StoreMenuBar(void);void				ShowTheMenuBar( void );short				CheckMenuHide( Point *mouseWhere );// help.cvoid				HelpScreen( void );// high scoresvoid				CopyString(Str255 dest, Str255 src);void				HandleHighScore( long );void				HighScoreEventLoop(Boolean, short);void				ClearHighScores(void);void				DrawHighScoreScreen(short);// preferencesvoid				LoadPreferences (void);void				InitialisePrefsRecord(void);void				UpdatePreferences(void);// musicvoid				StartInterfaceMusic(void);void				StopInterfaceMusic(void);void				StartGameMusic(void);void				StopGameMusic(void);void				SetMusicVolume(short);void 				MusicVolumeDialog(void);pascal Boolean		MyMusicSliderEventFilter(DialogPtr theDialog, EventRecord *theEvent, short *itemHit);void				StopMusic(void);void				PauseGameMusic(void);void				ResumeGameMusic(void);// soundvoid				InitSoundChannels();void				ReleaseSounds(void);void				PlayASound(short);void				BeanieSound(void);void				JetPackSound(void);void				DamageSound(void);void				SetSoundVolume(short);void 				SoundVolumeDialog(void);pascal Boolean		MySoundSliderEventFilter(DialogPtr theDialog, EventRecord *theEvent, short *itemHit);// gworlds.cvoid				SetupWindow(void);void				SetupGWorlds(void);// error handling.cvoid				FatalError(char *error, Boolean	resolutionSwitch);void				WorldFileNotFoundDialog(Str255	fileName);// file searching.cOSErr				FindFile(long directory, Str255 name, FSSpecPtr	fileSpec);pascal	OSErr		NameFileSearch(StringPtr volName, short vRefNum, ConstStr255Param fileName,						FSSpecPtr matches, long reqMatchCount, long *actMatchCount,							   Boolean newSearch, Boolean partial);pascal	OSErr		DetermineVRefNum(StringPtr pathname, short vRefNum, short *realVRefNum);pascal	OSErr		CreatorTypeFileSearch(/*ConstStr255Param*/StringPtr, short,									  OSType, OSType, FSSpecPtr, long , long *, Boolean);// registrationvoid				RegistrationInfoDialog( void );void				RegisterDialog( void );void				CheckRegistration( void );void				CheckRegistrationTwo( void );void				CheckRegistrationThree( void );void				CheckRegistrationFour( void );void				ThankYouDialog( void );void				IncorrectCodeDialog( void );void				HackedCopy( void );ControlHandle		MarksCustomDialog(WindowPtr dialogWindow);pascal Boolean		MyEventFilter(DialogPtr	theDialog, EventRecord *theEvent, short *itemHit);void				CenterRectInRect(Rect *rect1, Rect *rect2);// delays.cvoid				GWDelay(long, long, Boolean);// sprite utils.cshort				TestMoveSpriteLeft(Rect *theSpriteRect, short pixels);short				TestSpriteWalkOffPlatformLeft(Rect *theSpriteRect, short pixels);short				TestMoveSpriteRight(Rect *theSpriteRect, short pixels);short				TestSpriteWalkOffPlatformRight(Rect *theSpriteRect, short pixels);short				TestMoveSpriteDown(Rect *theSpriteRect, short pixels, short *returnValue);short				TestMoveSpriteUp(Rect *theSpriteRect, short pixels);// particles.cGWParticleWrapperPtr	AllocateParticleWrapper(void);void					AllocateParticle(GWParticlePtr, short vert, short horiz, short color);GWParticleWrapperPtr	DisposeParticle(GWParticleWrapperPtr theParticle);Boolean					HandleParticle(GWParticlePtr theParticle, Rect *drawingRect);void					CreateParticlesFromMonster(MonsterSpritePtr	whichSprite);void					CreateParticlesFromBanana(BananaSpritePtr	whichSprite);// get item data.cshort				GetPlatformData(short,short);short				GetOtherData(short, short);short				GetSceneryData(short, short);short				GetPlatformDataType(short,short);void				SetOtherData(short, short, short);// interface bar.cvoid				DrawInterfaceBar( void );void				DrawScore (void);void				DrawTheMap(void);void				DrawLivesLeft(void);void				DrawLifeBar( void );void				DrawStaminaBar( void );void				DrawKeyBananaStatus(void);// load and save gameBoolean	CheckCanSave(void);void	SaveGame(void);void	SaveFileSpec(void);void	SavePlayer(void);void	SaveMonsters(void);void	SaveDoors(void);void	SaveItems(void);void	SaveTalisman(void);void	LoadGame(void);void	LoadFileSpec(void);void	LoadPlayer(void);void	LoadMonsters(void);void	LoadDoors(void);void	LoadItems(void);void	LoadTalisman(void);// screenshot.cvoid 				PlotBitMap(PixMap *pix, short h, short v, short mode);void				SavePixMap(PixMap *pix);// InputSprocket.cvoid				InitialiseInputSprocket( void );void				Input_Activate(Boolean	pause);Boolean				WasButtonPressed(ISpElementReference inElement);Boolean				IsButtonHeld(ISpElementReference inElement);// resolution switchingGDHandle			SelectMonitor( void );GDHandle			UserSelectScreen(short);Boolean				ChangeResolution(void);void				RestoreResolution(void);// new gamevoid				NewGame( FSSpec * );// choose staring levelOSErr				GetStartingLevel( FSSpec * );OSErr				UserSelectWorldFile(FSSpec *theFile);OSErr				UserSelectSaveFile(FSSpec *theFile);void				SetupSelectionRgn (void);void				HandleSelectionMouseMoved(Point);void				HandleSelectionUpdate(EventRecord *);void				OnlyAvailableInFullVersion(void);// game looplong 				GameLoop (FSSpec *);OSErr				LocateNextWorldFile(FSSpec *);OSErr				OpenWorldFile(FSSpec *);void				CloseWorldFile(void);void				DoMessage(void);// run a worldshort				RunAWorld();void				DisposeWorldData(void);void				HandleCutScene( void );// load world.cvoid				LoadWorldData(void);void				LoadTheGraphics( void );void				LoadExtraSounds(void);void				LoadTheMonsters(void);void				LoadTheDoors(void);void				LoadTheItems(void);void				LoadItemsForRoom(short width, short height, short **, short);// run a room.cshort				RunARoom(short);void				LoadRoomData(short);void				DisposeRoomSprites(void);void				DisposeRoomData(void);void				InitialisePlayerValues(DoorSpritePtr, short);// run a levelshort				RunALife(Boolean);void				RunAFrame(void);void				DoBlitting();// draw screenvoid				LoadTileSprites();void				DrawThePlatforms();void				DrawOneRow(short);void				DrawOneColumn(short);void				DisposeOneRow(short);void				DisposeOneColumn(short);void				DrawOneItem(short, short);void				DrawOnePlatform(short, short);void				DrawParallaxLayer(void);// copy to screenvoid				PreCalculateVisibleRect(Rect *);void				LoadDisposeRowColumn(void);// pause.cvoid				PauseGame( void );void				DoPauseEvent(EventRecord *eventPtr, PicHandle);void				HandlePauseSuspendResume(EventRecord *);void				HandlePauseMouseDown(EventRecord *);void				HandlePauseMenuChoice(long menuChoice);void				HandlePauseAppleChoice(short item);// blittersvoid				SmallBlit(short *, long, short *);void				SpringBlit(short *, long, short *, short);void				ItemBlit(short *, long, short *, long, long);void				BlitDarwin(short horiz, short vert);void				MonsterBlit(short *, long, short *, long, long, Boolean, short);void				DoorBlit(short *, long , short *, long, long);// collisionsvoid				HandleCollisions(void);Boolean				CheckPlayerCollision(CollisionSpritePtr );Boolean				CheckSpriteCollision(CollisionSpritePtr topSprite, CollisionSpritePtr bottomSprite);Boolean				CheckBananaCollision(CollisionSpritePtr theBanana, CollisionSpritePtr theSprite);Boolean				CheckDoorCollision(DoorSpritePtr whichDoor);Boolean				CollisionBlit(short *, long, short *, long, short, short);Boolean				CollisionBlitFlip(short *source1, long offset1, short *source2, long offset2, short height, short width);void				HandleTalismanCollision(TalismanSpritePtr );void				HandleItemCollision(ItemSpritePtr );// playervoid				GetPlayersAction(void);void				HandlePlayer(void);void				HandleJetPack(void);void				DarwinIdle(void);void				MoveDarwinHoriz(void);void				SetupJumping(void);void				MoveDarwinVertical(void);void				SetupDarwinFalling(void);void				SetupThrowBanana(void);void				ThrowBanana(void);void				CreateBananas(PlayerSpritePtr );void				AllocateBanana(Rect *theRect, short speedh, short speedv);void				SetupDeath(void);void				DarwinDying(void);void				HandleTeleport(void);void				UpdateHorizontalPosition(float offset);short				DarwinOnConveyor(short h, short v);// bananasBananaSpritePtr		DisposeBanana(BananaSpritePtr );void				HandleBananas(Rect *);void				HandleOneBanana(BananaSpritePtr, Rect *);// conveyorsConveyorSpritePtr	AllocateConveyor(void);ConveyorSpritePtr	DisposeConveyor(ConveyorSpritePtr);void				HandleConveyors(void);void				HandleOneConveyor(ConveyorSpritePtr);// springsSpringSpritePtr		AllocateSpring(void);SpringSpritePtr		DisposeSpring(SpringSpritePtr);void				HandleSprings(Rect *);void				HandleOneSpring(SpringSpritePtr, Rect *);void				CheckJoiningSprings(SpringSpritePtr spring);// dissolversDissolverSpritePtr	AllocateDissolver(void);DissolverSpritePtr	DisposeDissolver(DissolverSpritePtr);void				HandleDissolvers(void);void				HandleOneDissolver(DissolverSpritePtr theDissolver);// hazardsHazardSpritePtr		AllocateHazard(void);HazardSpritePtr		DisposeHazard(HazardSpritePtr);void				HandleHazards(void);void				HandleOneHazard(HazardSpritePtr);// doorsDoorSpritePtr		AllocateDoor(void);DoorSpritePtr		DisposeDoor(DoorSpritePtr);void				HandleDoors(Rect *drawingRect);void				HandleOneDoor(DoorSpritePtr, Rect *);// monstersMonsterSpritePtr	AllocateMonster(void);MonsterSpritePtr	DisposeMonster(MonsterSpritePtr theSprite);void				HandleMonsters(Rect *);void				HandleOneMonster(MonsterSpritePtr, Rect *);void				MoveMonster(MonsterSpritePtr, Rect *);void				MonsterHorizontal(MonsterSpritePtr);void				MonsterHorizontalWalking(MonsterSpritePtr);void				MonsterVertical(MonsterSpritePtr);void				MonsterWalk(MonsterSpritePtr, short);void				MonsterFly(MonsterSpritePtr, short);short				MoveMonsterLeftSimple(MonsterSpritePtr, short);short				MoveMonsterRightSimple(MonsterSpritePtr, short);short				MoveMonsterLeft(MonsterSpritePtr, short);short				MoveMonsterRight(MonsterSpritePtr, short);short				MoveMonsterUp(MonsterSpritePtr, short);short				MoveMonsterDown(MonsterSpritePtr, short);void				HandleScript(MonsterSpritePtr whichMonster, short whichScript);void				RunScript(MonsterSpritePtr	theMonster, short	whichScript);// items/talismanvoid				AllocateItemFromMonster(MonsterSpritePtr	theMonster);ItemSpritePtr		AllocateItem(void);ItemSpritePtr		DisposeItem(ItemSpritePtr);void				HandleItems(Rect *);void				HandleOneItem(ItemSpritePtr, Rect *);TalismanSpritePtr	AllocateTalisman(void);TalismanSpritePtr	DisposeTalisman(TalismanSpritePtr);void				HandleTalisman(Rect *);void				HandleOneTalisman(TalismanSpritePtr, Rect *);void				StoreKeyCopies(void);void				RestoreKeyCopies(void);ItemSpritePtr		AllocateKeyCopy(void);ItemSpritePtr		DisposeKeyCopy(ItemSpritePtr theSprite);// timer//Boolean				DrawingVBLProcedure(DSpContextReference , void *);