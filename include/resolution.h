// This extern should be removed once this function is formally defined in Displays.hextern pascal OSErr DMUseScreenPrefs(Boolean usePrefs, Handle displayState) THREEWORDINLINE(0x303C, 0x03EC, 0xABEB);#define		KMonoDev			0						// false (handy definitions for gdDevType settings)#define		kColorDev			1						// true#define		char_Enter			0x03					// for our filter proc#define		char_Return			0x0D					//#define		iRevertItem			1						// User buttons#define		iConfirmItem		2						//#define		kSecondsToConfirm	8						// seconds before confirm dialog is taken down#define		rConfirmSwtchAlrt	2735					// ID of alert dialog// video request structurestruct VideoRequestRec	{	GDHandle		screenDevice;		// <in/out>	nil will force search of best device, otherwise search this device only	short			reqBitDepth;		// <in>		requested bit depth	short			availBitDepth;		// <out>	available bit depth	unsigned long	reqHorizontal;		// <in>		requested horizontal resolution	unsigned long	reqVertical;		// <in>		requested vertical resolution	unsigned long	availHorizontal;	// <out>	available horizontal resolution	unsigned long	availVertical;		// <out>	available vertical resolution	unsigned long	requestFlags;		// <in>		request flags	unsigned long	availFlags;			// <out>	available mode flags	unsigned long	displayMode;		// <out>	mode used to set the screen resolution	unsigned long	depthMode;			// <out>	mode used to set the depth	Fixed 			refreshRate;		// <out>	Vertical Refresh Rate in Hz	VDSwitchInfoRec	switchInfo;			// <out>	DM2.0 uses this rather than displayMode/depthMode combo};typedef struct VideoRequestRec VideoRequestRec;typedef struct VideoRequestRec *VideoRequestRecPtr;struct DepthInfo {	VDSwitchInfoRec			depthSwitchInfo;			// This is the switch mode to choose this timing/depth	VPBlock					depthVPBlock;				// VPBlock (including size, depth and format)};typedef struct DepthInfo DepthInfo;struct ListIteratorDataRec {	VDTimingInfoRec			displayModeTimingInfo;		// Contains timing flags and such	unsigned long			depthBlockCount;			// How many depths available for a particular timing	DepthInfo				*depthBlocks;				// Array of DepthInfo};typedef struct ListIteratorDataRec ListIteratorDataRec;typedef struct ScreenInfo {	GDHandle			theGDevice;	VideoRequestRec		theVideoRequest;	Boolean				screenOkay;	struct ScreenInfo	*nextScreen;} ScreenInfo, *ScreenInfoPtr;// requestFlags bit values in VideoRequestRec (example use: 1<<kAbsoluteRequestBit)enum {	kBitDepthPriorityBit		= 0,	// Bit depth setting has priority over resolution	kAbsoluteRequestBit			= 1,	// Available setting must match request	kShallowDepthBit			= 2,	// Match bit depth less than or equal to request	kMaximizeResBit				= 3,	// Match screen resolution greater than or equal to request	kAllValidModesBit			= 4		// Match display with valid timing modes (may include modes which are not marked as safe)};// availFlags bit values in VideoRequestRec (example use: 1<<kModeValidNotSafeBit)enum {	kModeValidNotSafeBit		= 0		//  Available timing mode is valid but not safe (requires user confirmation of switch)};ScreenInfoPtr	firstScreen;//VideoRequestRec requestRec;VideoRequestRec originalRec;OSErr RVRequestVideoSetting (VideoRequestRecPtr requestRecPtr);OSErr RVGetCurrentVideoSetting (VideoRequestRecPtr requestRecPtr);OSErr RVSetVideoRequest (VideoRequestRecPtr requestRecPtr);OSErr RVConfirmVideoRequest (VideoRequestRecPtr requestRecPtr);OSErr RVSetVideoAsScreenPrefs (void);void GravitateMonitors (void);pascal Boolean ConfirmAlertFilter(DialogRef theDialog, EventRecord *theEvent, short *itemHit);pascal void ModeListIterator(void *userData, DMListIndexType, DMDisplayModeListEntryPtr displaymodeInfo);void GetRequestTheDM2Way (	VideoRequestRecPtr requestRecPtr, GDHandle walkDevice,							DMDisplayModeListIteratorUPP myModeIteratorProc, DMListIndexType theDisplayModeCount,							DMListType *theDisplayModeList);Boolean FindBestMatch (VideoRequestRecPtr requestRecPtr, short bitDepth, unsigned long horizontal, unsigned long vertical);